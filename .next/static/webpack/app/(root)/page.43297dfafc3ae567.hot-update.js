"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(root)/page",{

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authFormSchema: function() { return /* binding */ authFormSchema; },\n/* harmony export */   calculateInterest: function() { return /* binding */ calculateInterest; },\n/* harmony export */   cn: function() { return /* binding */ cn; },\n/* harmony export */   convertNumberToMoney: function() { return /* binding */ convertNumberToMoney; },\n/* harmony export */   countTransactionCategories: function() { return /* binding */ countTransactionCategories; },\n/* harmony export */   decryptId: function() { return /* binding */ decryptId; },\n/* harmony export */   encryptId: function() { return /* binding */ encryptId; },\n/* harmony export */   extractCustomerIdFromUrl: function() { return /* binding */ extractCustomerIdFromUrl; },\n/* harmony export */   fetchMetalsPrices: function() { return /* binding */ fetchMetalsPrices; },\n/* harmony export */   formUrlQuery: function() { return /* binding */ formUrlQuery; },\n/* harmony export */   formatAmount: function() { return /* binding */ formatAmount; },\n/* harmony export */   formatDateTime: function() { return /* binding */ formatDateTime; },\n/* harmony export */   formatDateToDisplay: function() { return /* binding */ formatDateToDisplay; },\n/* harmony export */   getAccountTypeColors: function() { return /* binding */ getAccountTypeColors; },\n/* harmony export */   getTransactionStatus: function() { return /* binding */ getTransactionStatus; },\n/* harmony export */   parseStringify: function() { return /* binding */ parseStringify; },\n/* harmony export */   removeSpecialCharacters: function() { return /* binding */ removeSpecialCharacters; }\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! query-string */ \"(app-pages-browser)/./node_modules/query-string/index.js\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ \"(app-pages-browser)/./node_modules/moment/moment.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* eslint-disable no-prototype-builtins */ \n\n\n\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_2__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n// FORMAT DATE TIME\nconst formatDateTime = (dateString)=>{\n    const dateTimeOptions = {\n        weekday: \"short\",\n        month: \"short\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true\n    };\n    const dateDayOptions = {\n        weekday: \"short\",\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n    };\n    const dateOptions = {\n        month: \"short\",\n        year: \"numeric\",\n        day: \"numeric\"\n    };\n    const timeOptions = {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true\n    };\n    const formattedDateTime = new Date(dateString).toLocaleString(\"en-US\", dateTimeOptions);\n    const formattedDateDay = new Date(dateString).toLocaleString(\"en-US\", dateDayOptions);\n    const formattedDate = new Date(dateString).toLocaleString(\"en-US\", dateOptions);\n    const formattedTime = new Date(dateString).toLocaleString(\"en-US\", timeOptions);\n    return {\n        dateTime: formattedDateTime,\n        dateDay: formattedDateDay,\n        dateOnly: formattedDate,\n        timeOnly: formattedTime\n    };\n};\nfunction formatAmount(amount) {\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 2\n    });\n    return formatter.format(amount);\n}\nconst parseStringify = (value)=>JSON.parse(JSON.stringify(value));\nconst removeSpecialCharacters = (value)=>{\n    return value.replace(/[^\\w\\s]/gi, \"\");\n};\nfunction formUrlQuery(param) {\n    let { params, key, value } = param;\n    const currentUrl = query_string__WEBPACK_IMPORTED_MODULE_3__[\"default\"].parse(params);\n    currentUrl[key] = value;\n    return query_string__WEBPACK_IMPORTED_MODULE_3__[\"default\"].stringifyUrl({\n        url: window.location.pathname,\n        query: currentUrl\n    }, {\n        skipNull: true\n    });\n}\nfunction getAccountTypeColors(type) {\n    switch(type){\n        case \"depository\":\n            return {\n                bg: \"bg-blue-25\",\n                lightBg: \"bg-blue-100\",\n                title: \"text-blue-900\",\n                subText: \"text-blue-700\"\n            };\n        case \"credit\":\n            return {\n                bg: \"bg-success-25\",\n                lightBg: \"bg-success-100\",\n                title: \"text-success-900\",\n                subText: \"text-success-700\"\n            };\n        default:\n            return {\n                bg: \"bg-green-25\",\n                lightBg: \"bg-green-100\",\n                title: \"text-green-900\",\n                subText: \"text-green-700\"\n            };\n    }\n}\nfunction countTransactionCategories(transactions) {\n    const categoryCounts = {};\n    let totalCount = 0;\n    // Iterate over each transaction\n    transactions && transactions.forEach((transaction)=>{\n        // Extract the category from the transaction\n        const category = transaction.category;\n        // If the category exists in the categoryCounts object, increment its count\n        if (categoryCounts.hasOwnProperty(category)) {\n            categoryCounts[category]++;\n        } else {\n            // Otherwise, initialize the count to 1\n            categoryCounts[category] = 1;\n        }\n        // Increment total count\n        totalCount++;\n    });\n    // Convert the categoryCounts object to an array of objects\n    const aggregatedCategories = Object.keys(categoryCounts).map((category)=>({\n            name: category,\n            count: categoryCounts[category],\n            totalCount\n        }));\n    // Sort the aggregatedCategories array by count in descending order\n    aggregatedCategories.sort((a, b)=>b.count - a.count);\n    return aggregatedCategories;\n}\nfunction extractCustomerIdFromUrl(url) {\n    // Split the URL string by '/'\n    const parts = url.split(\"/\");\n    // Extract the last part, which represents the customer ID\n    const customerId = parts[parts.length - 1];\n    return customerId;\n}\nfunction encryptId(id) {\n    return btoa(id);\n}\nfunction decryptId(id) {\n    return atob(id);\n}\nconst getTransactionStatus = (date)=>{\n    const today = new Date();\n    const twoDaysAgo = new Date(today);\n    twoDaysAgo.setDate(today.getDate() - 2);\n    return date > twoDaysAgo ? \"Processing\" : \"Success\";\n};\nconst authFormSchema = (type)=>zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        email: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().email(),\n        password: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().min(5),\n        firstName: type === \"SignIn\" ? zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional() : zod__WEBPACK_IMPORTED_MODULE_4__.z.string().min(5),\n        lastName: type === \"SignIn\" ? zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional() : zod__WEBPACK_IMPORTED_MODULE_4__.z.string().min(5)\n    });\nconst formatDateToDisplay = (dateString)=>{\n    const date = new Date(dateString);\n    const options = {\n        day: \"2-digit\",\n        month: \"short\",\n        year: \"numeric\"\n    };\n    return date.toLocaleDateString(\"en-GB\", options).replace(\",\", \"\").replace(/(\\d{2}) (\\w{3}) (\\d{4})/, \"$1-$2-$3\");\n};\nconst calculateInterest = (formData)=>{\n    const { amount, startDate, endDate, rate } = formData;\n    // Calculate Time\n    const a = moment__WEBPACK_IMPORTED_MODULE_1___default()(endDate);\n    const b = moment__WEBPACK_IMPORTED_MODULE_1___default()(startDate);\n    let years = a.diff(b, \"year\");\n    b.add(years, \"years\");\n    let months = a.diff(b, \"months\");\n    b.add(months, \"months\");\n    let days = a.diff(b, \"days\");\n    // Calculate Interest\n    let interTable = \"\";\n    let tempAmount = amount;\n    let totalInter = 0;\n    // Calculate interest for years\n    for(let i = 0; i < years; i++){\n        const inter = tempAmount / 100 * rate;\n        totalInter += inter;\n        tempAmount += inter;\n        interTable += \"\".concat(i + 1, \" Year: \").concat(inter.toFixed(2), \" and Amount: \").concat(tempAmount.toFixed(2), \"\\n\");\n    }\n    // Calculate interest for months\n    const monRate = rate / 12;\n    for(let i = 0; i < months; i++){\n        const inter = tempAmount / 100 * monRate;\n        totalInter += inter;\n        interTable += \"\".concat(years, \" Year and \").concat(i + 1, \" Month: \").concat(inter.toFixed(2), \" and Amount: \").concat(tempAmount.toFixed(2), \"\\n\");\n    }\n    // Calculate interest for days\n    const dateRate = (rate / 12 / moment__WEBPACK_IMPORTED_MODULE_1___default()(endDate).daysInMonth()).toFixed(2);\n    for(let i = 0; i < days; i++){\n        const inter = tempAmount / 100 * parseFloat(dateRate);\n        totalInter += inter;\n    }\n    interTable += \"\".concat(years, \" Year and \").concat(months, \" Month and \").concat(days, \" Day: \").concat(totalInter.toFixed(2), \" and Amount: \").concat(tempAmount.toFixed(2), \"\\n\");\n    return {\n        interTable,\n        totalInterest: totalInter,\n        totalAmount: tempAmount,\n        time: \"\".concat(years, \" years \").concat(months, \" months \").concat(days, \" days\")\n    };\n};\nconst convertNumberToMoney = (money)=>{\n    var moneyvalue = money || 0;\n    const returnMoney = moneyvalue.toLocaleString(\"en-IN\", {\n        maximumFractionDigits: 0,\n        style: \"currency\",\n        currency: \"INR\"\n    });\n    return returnMoney;\n};\nconst fetchMetalsPrices = async ()=>{\n    const API_KEY = process.env.APISED_API_KEY;\n    let BASE_URL = process.env.APISED_API_KEY_URL || \"\";\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(BASE_URL, {\n            params: {\n                metals: \"XAU,XAG\",\n                base_currency: \"INR\",\n                currencies: \"INR\",\n                weight_unit: \"gram\"\n            },\n            headers: {\n                \"x-api-key\": API_KEY\n            }\n        });\n        const { data } = response.data; // Update based on the actual API response structure\n        const timestamp = data.timestamp;\n        const goldPrice = data.metal_prices.XAU.price;\n        const silverPrice = data.metal_prices.XAG.price;\n        return {\n            goldPrice,\n            silverPrice,\n            timestamp\n        };\n    } catch (error) {\n        console.error(\"Error fetching metals prices:\", error);\n        throw new Error(\"Failed to fetch data from APISed API\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ })

});